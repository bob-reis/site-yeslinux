#!/usr/bin/env node
import { readFile, mkdir, writeFile } from 'node:fs/promises';
import { resolve, dirname } from 'node:path';
import yaml from 'js-yaml';

async function main() {
  const candidates = [
    resolve(process.cwd(), '../personal-security-checklist.yml'),
    resolve(process.cwd(), 'personal-security-checklist.yml'),
  ];
  let raw = '';
  for (const p of candidates) {
    try {
      raw = await readFile(p, 'utf-8');
      break;
    } catch {}
  }
  if (!raw) {
    console.error('Could not locate personal-security-checklist.yml');
    process.exit(1);
  }
  const parsed = yaml.load(raw);
  const sectionsRaw = Array.isArray(parsed)
    ? parsed
    : (parsed && parsed.sections) || [];

  // Normalize data to satisfy TS types
  const normPriority = (p) => {
    if (typeof p !== 'string') return undefined;
    const v = p.toLowerCase();
    if (v === 'basic') return 'essential';
    if (v === 'essential' || v === 'optional' || v === 'advanced') return v;
    return undefined;
  };

  const fixLink = (link) => {
    if (!link || typeof link !== 'object') return link;
    const l = { ...link };
    if (!l.url && l.utl) {
      l.url = l.utl;
      delete l.utl;
    }
    return l;
  };

  const sanitize = (sections) =>
    sections.map((s) => ({
      ...s,
      color: typeof s.color === 'string' && s.color ? s.color : 'blue',
      checklist: Array.isArray(s.checklist)
        ? s.checklist.map((c) => ({
            ...c,
            priority: normPriority(c.priority) ?? 'optional',
          }))
        : [],
      softwareLinks: Array.isArray(s.softwareLinks)
        ? s.softwareLinks.map(fixLink)
        : undefined,
      helpfulTools: Array.isArray(s.helpfulTools)
        ? s.helpfulTools.map(fixLink)
        : undefined,
      furtherResources: Array.isArray(s.furtherResources)
        ? s.furtherResources.map(fixLink)
        : undefined,
    }));

  const sections = sanitize(sectionsRaw);

  const outPath = resolve(process.cwd(), 'src/data/checklists.generated.ts');
  await mkdir(dirname(outPath), { recursive: true });
  const header = `// AUTO-GENERATED by generate-checklist.mjs. Do not edit by hand.\n`;
  const contents = `${header}import type { Sections } from '~/types/PSC';\nexport const sections: Sections = ${JSON.stringify(sections, null, 2)} as const;\n`;
  await writeFile(outPath, contents, 'utf-8');
  console.log(`Wrote ${outPath}`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
